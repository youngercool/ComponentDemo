apply plugin: 'com.android.application'
apply plugin: 'com.alibaba.arouter'
def cfg = rootProject.ext.android
android {
    compileSdkVersion cfg.compileSdkVersion
    defaultConfig {
        applicationId "com.example.younger.componentdemo"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode//更新次数
        versionName cfg.versionName//版本号
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            if (isModuleRun.toBoolean()) {
                manifest.srcFile 'src/main/runalone/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //release 时 debug 目录下文件不需要合并到主工程
                    exclude '**/runalone/**'
                }
            }
        }
    }
}

if (!isModuleRun.toBoolean()) {
    //获取当前运行的task
    def tasks = project.gradle.startParameter.taskNames
    for (String task : tasks) {
        def upperName = task.toUpperCase()
        //判断task是编译期还是运行期
        if (upperName.contains("ASSEMBLE") || upperName.contains("INSTALL")) {
            dependencies.add("api", project.project(':' + 'ordermodule'))
            dependencies.add("api", project.project(':' + 'picloader'))
            dependencies.add("api", project.project(':' + 'arouter'))
        }


    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(':basiclib')
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
}
